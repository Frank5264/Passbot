let handler = m => m;

handler.before = async function (m, { conn }) {
  let body = m.text;
  let chat = m.sender;

  if (chat === "201559835871@s.whatsapp.net") {
    // ูุตูููุฉ ุงููููุงุช ุงููุญููุธุฉ
    let savedWords = ["erea.111970", "erea&malek.111970", "frank24"];

    // ูุตูููุฉ ุงููููุงุช ุฃู ุงูุนุจุงุฑุงุช ุบูุฑ ุงูุฅูุฌููุฒูุฉ
    let nonEnglishWords = [
      { word: "ูุฑุญุจุง", response: "ุฃููุงู! ููู ูููููู ูุณุงุนุฏุชูุ" },
      { word: "ููู ุญุงูู", response: "ุฃูุง ุจุฎูุฑุ ุดูุฑุงู ูุณุคุงูู!" },
      { word: "ูุง ุงุณูู", response: "ุฃูุง ุจูุช ูุงุชุณุงุจุ ุณุนูุฏ ุจุฎุฏูุชู!" }
    ];

    // ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ุงูุฑุณุงูุฉ ุชุญุชูู ุนูู ุญุฑูู ุฅูุฌููุฒูุฉ
    if (/[a-zA-Z]/.test(body)) {
      let matched = false;
      let highestSimilarity = 0;

      for (let word of savedWords) {
        let similarity = getSimilarity(body, word);
        if (similarity === 100) {
          matched = true;
          break;
        }
        if (similarity > highestSimilarity) {
          highestSimilarity = similarity;
        }
      }

      if (matched) {
        conn.reply(m.chat, "ุงูุชู ุตุฏูุชู ููุจูุฉ ๐ \n ุงูุดู ุงูุนุจู ุจุนูุฏ ู ุดุงุทุฑุฉ ๐\n ุจุทูุช ุงุดุญุช ", m);

        setTimeout(() => {
          conn.reply(m.chat, "ุจูุฒุฑ ๐\n ุงูู ูุจุฑูู ููููุตุฉ ๐ \n ุงุชุตูู ุจูุง ุฑุตูุฏ ุ ุงูุง ุนุงุฑู ุงูู ุจุฎููุฉ ุจุณ ุชุนุงูู ุน ููุณู ุงููุฑุฉ ุฏู ๐", m);
        }, 2000); // ุชุฃุฎูุฑ ูุฏุฑู ุซุงููุชุงู

      } else {
        let replyMessage = "";

        if (highestSimilarity < 50) {
          replyMessage = `ุบูุท โ๏ธ \n ูุณุจุฉ ุงูุชุดุงุจู ${highestSimilarity.toFixed(2)}%.\nููุฑู ุนุฏู ู ุจุฎููุฉ ๐!`;
        } else if (highestSimilarity < 70) {
          replyMessage = `ุบูุท โ๏ธ \n ูุณุจุฉ ุงูุชุดุงุจู ${highestSimilarity.toFixed(2)}%.\n ุนุงุด ูุฑุจุชู ๐คฅ๐.`;
        } else if (highestSimilarity < 80) {
          replyMessage = `ุบูุท โ๏ธ \n ูุณุจุฉ ุงูุชุดุงุจู ${highestSimilarity.toFixed(2)}%. ุนุงุงุด ูุงุถููู ุชูุฉ ู ุจุฎููุฉ ๐๐!`;
        } else {
          replyMessage = `ุบูุท โ๏ธ \n ูุณุจุฉ ุงูุชุดุงุจู ${highestSimilarity.toFixed(2)}%. ุชูุฑูุจูุง ููุงู!`;
        }

        conn.reply(m.chat, replyMessage, m);
      }
    } else {
      let nonEnglishMatched = false;
      
      for (let item of nonEnglishWords) {
        if (body.includes(item.word)) {
          conn.reply(m.chat, item.response, m);
          nonEnglishMatched = true;
          break;
        }
      }

      if (!nonEnglishMatched) {
      
      }
    }
  }
};

function getSimilarity(a, b) {
  const distance = levenshtein(a, b);
  const maxLen = Math.max(a.length, b.length);
  return (1 - distance / maxLen) * 100;
}

// ุฏุงูุฉ ุญุณุงุจ ูุณุงูุฉ ููููุดุชุงูู
function levenshtein(a, b) {
  const alen = a.length;
  const blen = b.length;
  const matrix = [];

  if (alen === 0) return blen;
  if (blen === 0) return alen;

  for (let i = 0; i <= alen; i++) {
    matrix[i] = [i];
  }

  for (let j = 0; j <= blen; j++) {
    matrix[0][j] = j;
  }

  for (let i = 1; i <= alen; i++) {
    for (let j = 1; j <= blen; j++) {
      const cost = a[i - 1] === b[j - 1] ? 0 : 1;
      matrix[i][j] = Math.min(
        matrix[i - 1][j] + 1, // ุญุฐู
        matrix[i][j - 1] + 1, // ุฅุถุงูุฉ
        matrix[i - 1][j - 1] + cost // ุงุณุชุจุฏุงู
      );
    }
  }

  return matrix[alen][blen];
}

export default handler;
